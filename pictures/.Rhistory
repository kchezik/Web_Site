for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Principle = Money + Contribution
}
return(round(Money,0))
}
Comp.Ret = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
return(round(Return,0))
}
Comp.Sav(2000, 0.05, 2, 1/12, 50)
Comp.Ret(2000, 0.05, 2, 1/12, 50)
24*50+2000
3420-3200
Comp.Sav = function(Principle, Interest, Time, Interval, Contribution) {
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Principle = Money + Contribution
}
return(round(Principle,0))
}
Comp.Ret = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
return(round(Return,0))
}
Comp.Sav(2000, 0.05, 2, 1/12, 50)
Comp.Ret(2000, 0.05, 2, 1/12, 50)
50*24
1200+2000
3200-3470
df = df %>% mutate(Savings = Comp.Sav(2000, Interest, 2, Contribution) + Comp.Sav(2000, Interest, 34, 458), Investment.Returns = Comp.Ret(2000, Interest, 2, Contribution)+ Comp.Ret(2000, Interest, 34, 458)) %>% tbl_df()
df
df = df %>% mutate(Savings = Comp.Sav(2000, Interest, 2, Interval, Contribution) + Comp.Sav(2000, Interest, 34, Interval, 458), Investment.Returns = Comp.Ret(2000, Interest, 2, Interval, Contribution)+ Comp.Ret(2000, Interest, 34, Interval, 458)) %>% tbl_df()
df
df %>% group_by(Contribution) %>% summarize(Mean.Sav = mean(Savings), Mean.Ret = mean(Investment.Returns))
df
ggplot(df, aes(Interest.Rate, Savings, colour = Contribution)) +
geom_point(type = 'solid') +
geom_point(aes(Interest.Rate, Investment.Returns),type = 'dashed') +
theme_bw()
ggplot(df, aes(Interest.Rate, Savings, colour = Contribution)) +
geom_line(linetype = 2) +
geom_line(aes(Interest.Rate, Investment.Returns),linetype = 1) +
theme_bw()
ggplot(df, aes(Interest, Savings, colour = Contribution)) +
geom_line(linetype = 2) +
geom_line(aes(Interest, Investment.Returns),linetype = 1) +
theme_bw()
ggplot(df, aes(Interest, Savings, colour = Contribution)) +
geom_line(linetype = 2)
ggplot(df, aes(Interest, Savings, colour = Contribution)) +
geom_line()
ggplot(df, aes(Interest, Savings, colour = as.factor(Contribution))) +
geom_line()
ggplot(df, aes(Interest, Savings, colour = as.factor(Contribution))) +
geom_line(linetype = 1)
ggplot(df, aes(Interest, Savings, colour = as.factor(Contribution))) +
geom_line(linetype = 1) +
geom_line(aes(Interest, Investment.Returns),linetype = 2) +
theme_bw()
df
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = mean(df$Savings)) +
theme_bw()
Comp.Ret(2000, 0.05, 2, 1/12, 50)
Comp.Ret = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(round(Return,0), round(Principle,0))
}
Comp.Ret(2000, 0.05, 2, 1/12, 50)
Comp.Ret = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Return = round(Return,0), Principle = round(Principle,0))
}
Comp.Ret(2000, 0.05, 2, 1/12, 50)
Year.2 = df %>% Comp.Ret(2000, Interest, 2, Interval, Contribution)
df
df = expand.grid(Contribution = seq(50, 200, by = 10), Interest = rnorm(10000, mean = 0.05, sd = 0.02), Interval = 1/12) %>% tbl_df() #All combinations of Monthly Contribution, Average Annual Interest & Contribution Interval.
df = expand.grid(Contribution = seq(50, 200, by = 10), Interest = rnorm(10000, mean = 0.05, sd = 0.02), Interval = 1/12) %>% tbl_df() #All combinations of Monthly Contribution, Average Annual Interest & Contribution Interval.
Year.2 = df %>% Comp.Ret(2000, Interest, 2, Interval, Contribution)
Comp.Ret = function(data, Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Return = round(Return,0), Principle = round(Principle,0))
}
Year.2 = df %>% Comp.Ret(2000, Interest, 2, Interval, Contribution)
df
Year.2 = Comp.Ret(2000, df$Interest, 2, df$Interval, df$Contribution)
df$Contribution
df$Interval
df$Interest
Comp.Ret = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Return = round(Return,0), Principle = round(Principle,0))
}
Year.2 = Comp.Ret(2000, df$Interest, 2, df$Interval, df$Contribution)
Year.2
head(Year.2)
df
Year.2 = bind_cols(Comp.Ret(2000, df$Interest, 2, df$Interval, df$Contribution)+Comp.Ret(2000, df$Interest, 34, df$Interval, 458))
head(Year.2)
df
df = bind_cols(df, Comp.Ret(2000, df$Interest, 2, df$Interval, df$Contribution)+Comp.Ret(2000, df$Interest, 34, df$Interval, 458))
df
#############################
#Compounded instantaniously.#
#############################
df = expand.grid(Contribution = seq(50, 200, by = 10), Interest = rnorm(10000, mean = 0.05, sd = 0.02), Interval = 1/12) %>% tbl_df() #All combinations of Monthly Contribution, Average Annual Interest & Contribution Interval.
#Compute the total compounded returns & the compounded interest returns.
Comp = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Investment.Returns = round(Return,0), Savings = round(Principle,0))
}
df = bind_cols(df, Comp.Ret(2000, df$Interest, 2, df$Interval, df$Contribution)+Comp.Ret(2000, df$Interest, 34, df$Interval, 458))
df
rm(list = ls())
#############################
#Compounded instantaniously.#
#############################
df = expand.grid(Contribution = seq(50, 200, by = 10), Interest = rnorm(10000, mean = 0.05, sd = 0.02), Interval = 1/12) %>% tbl_df() #All combinations of Monthly Contribution, Average Annual Interest & Contribution Interval.
#Compute the total compounded returns & the compounded interest returns.
Comp = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Investment.Returns = round(Return,0), Savings = round(Principle,0))
}
df = bind_cols(df, Comp(2000, df$Interest, 2, df$Interval, df$Contribution)+Comp.Ret(2000, df$Interest, 34, df$Interval, 458))
#############################
#Compounded instantaniously.#
#############################
df = expand.grid(Contribution = seq(50, 200, by = 10), Interest = rnorm(10000, mean = 0.05, sd = 0.02), Interval = 1/12) %>% tbl_df() #All combinations of Monthly Contribution, Average Annual Interest & Contribution Interval.
#Compute the total compounded returns & the compounded interest returns.
Comp = function(Principle, Interest, Time, Interval, Contribution) {
Return = 0
for(i in 1:(Time*12)){
Money = Principle * exp(Interest*Interval)
Return = Return + Money - Principle
Principle = Money + Contribution
}
data.frame(Investment.Returns = round(Return,0), Savings = round(Principle,0))
}
df = bind_cols(df, Comp(2000, df$Interest, 2, df$Interval, df$Contribution)+Comp(2000, df$Interest, 34, df$Interval, 458))
df
#Compute all return combinations.
df = df %>% mutate(Savings = Comp.Sav(2000, Interest, 2, Interval, Contribution) + Comp.Sav(2000, Interest, 34, Interval, 458), Investment.Returns = Comp.Ret(2000, Interest, 2, Interval, Contribution)+ Comp.Ret(2000, Interest, 34, Interval, 458)) %>% tbl_df()
df %>% group_by(Contribution) %>% summarize(Mean.Sav = mean(Savings), Mean.Ret = mean(Investment.Returns))
ggplot(df, aes(Interest, Savings, colour = as.factor(Contribution))) +
geom_line(linetype = 1) +
geom_line(aes(Interest, Investment.Returns),linetype = 2) +
theme_bw()
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = mean(df$Savings)) +
theme_bw()
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = mean(df$Savings)) +
theme_bw()
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = mean(df$Savings)) +
geom_vline(xintercept = quantile(Savings, probs = c(0.25))) +
theme_bw()
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = mean(df$Savings)) +
geom_vline(xintercept = quantile(df$Savings, probs = c(0.25))) +
theme_bw()
ggplot(df, aes(Savings)) +
geom_histogram(alpha = 0.1, fill = 'blue', color = 'blue') +
geom_histogram(aes(Investment.Returns),alpha = 0.1, fill = 'green', color = 'green') +
geom_vline(xintercept = quantile(df$Savings, probs = c(0.25)),colour = 'red') +
geom_vline(xintercept = quantile(df$Savings, probs = c(0.5))) +
geom_vline(xintercept = quantile(df$Savings, probs = c(0.75)),colour = 'red') +
theme_bw()
quantile(df$Savings, probs = c(0.25,.5,.75))
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
shiny::runApp('~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends/Shiny_App1')
#library(dplyr)
load("03_Data_Annual.RData")
Y.Data = Y.Data %>%
group_by(Station.ID) %>%
mutate(Med.sc = as.vector(scale(Median.F, center = F)),
Min.sc = as.vector(scale(Min.F, center = F)),
Max.sc = as.vector(scale(Max.F, center = F)))
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*8 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*3 #Point size.
Area.values = c(500,1500,10000,100000,200000) #Area values of interest for the legends.
Legend.Area.size = (((Area.values-min(weight))/(diff(range(weight))))^0.3)*3 #Equivalent size given legend point size values.
Legend.Area.size.lines = (((Area.values-min(weight))/(diff(range(weight))))^0.3)*8 #Equivalent size given legend line size values.
Legend.x = seq(1999,2006,length.out = 5) #x values for line/point legend.
Legend.y = rep(max(pretty(response)), 5) #y values for line/point legend.
Legend.x.col = seq(1999,2006,length.out = 20000) #x values for color legend.
Legend.y.col = rep(max(pretty(response)), 20000) #y values for color legend.
#color legend point data scaled from 0-1.
legend.col = (Legend.x.col-min(Legend.x.col))/(diff(range(Legend.x.col)))
Color ramp function
legend.cols = FUN(legend.col)
legend.cols = rgb(legend.cols, maxColorValue=256)
#Apply function
legend.cols = paste(legend.cols, "99", sep = "")
par(cex.axis = Te.cex, mgp = c(3,0.6,0), oma = c(2,2,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~time, col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
points(Legend.x.col, Legend.y.col-0.32, pch = 22, bg = legend.cols)
par(fg = 'black')
points(Legend.x, Legend.y-0.13, pch = 21, cex = Legend.Area.size, bg = "black")
text(Legend.x, Legend.y, labels = c("500","1500","10000","100000","200000"), cex = Te.cex)
text(Legend.x[5]+1.5, Legend.y[5], labels = expression("km"^2), cex = Te.cex)
for(i in 1:5){
lines(c(Legend.x[i]-0.5,Legend.x[i]+0.5),c(Legend.y[i]-0.24,Legend.y[i]-0.24), lwd = Legend.Area.size.lines[i])
}
mtext(xlab, side = 1, line = 0.8, cex = Te.cex+0.1, outer = TRUE) # X axis label.
mtext(ylab, side = 2, line = 0.8, cex = Te.cex+0.1, las = 0, outer = TRUE) # Y axis label.
axis(2, at = seq(0,round(range(response)[2],2),length.out = 20), labels = round(seq(0,round(range(response)[2],2),length.out = 20),2),lwd = 0.5, line = -0.8, outer = TRUE) # y axis.
par(mgp = c(3,0.2,0))
axis(1,at=seq(min(time),max(time),1), labels = as.character(seq(min(time),max(time),1)),lwd = 0.5, line = -0.1, outer = TRUE) # x axis.
}
setwd("~/Documents/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends")
load("03_Data_Annual.RData")
Y.Data = Y.Data %>%
group_by(Station.ID) %>%
mutate(Med.sc = as.vector(scale(Median.F, center = F)),
Min.sc = as.vector(scale(Min.F, center = F)),
Max.sc = as.vector(scale(Max.F, center = F)))
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*8 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*3 #Point size.
Area.values = c(500,1500,10000,100000,200000) #Area values of interest for the legends.
Legend.Area.size = (((Area.values-min(weight))/(diff(range(weight))))^0.3)*3
#Equivalent size given legend point size values.
Legend.Area.size.lines = (((Area.values-min(weight))/(diff(range(weight))))^0.3)*8
#Equivalent size given legend line size values.
Legend.x = seq(1999,2006,length.out = 5) #x values for line/point legend.
Legend.y = rep(max(pretty(response)), 5) #y values for line/point legend.
Legend.x.col = seq(1999,2006,length.out = 20000) #x values for color legend.
Legend.y.col = rep(max(pretty(response)), 20000) #y values for color legend.
#color legend point data scaled from 0-1.
legend.col = (Legend.x.col-min(Legend.x.col))/(diff(range(Legend.x.col)))
#Color ramp function
legend.cols = FUN(legend.col)
legend.cols = rgb(legend.cols, maxColorValue=256)
#Apply function
legend.cols = paste(legend.cols, "99", sep = "")
par(cex.axis = Te.cex, mgp = c(3,0.6,0), oma = c(2,2,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~time, col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
points(Legend.x.col, Legend.y.col-0.32, pch = 22, bg = legend.cols)
par(fg = 'black')
points(Legend.x, Legend.y-0.13, pch = 21, cex = Legend.Area.size, bg = "black")
text(Legend.x, Legend.y, labels = c("500","1500","10000","100000","200000"), cex = Te.cex)
text(Legend.x[5]+1.5, Legend.y[5], labels = expression("km"^2), cex = Te.cex)
for(i in 1:5){
lines(c(Legend.x[i]-0.5,Legend.x[i]+0.5),c(Legend.y[i]-0.24,Legend.y[i]-0.24), lwd = Legend.Area.size.lines[i])
}
mtext(xlab, side = 1, line = 0.8, cex = Te.cex+0.1, outer = TRUE) # X axis label.
mtext(ylab, side = 2, line = 0.8, cex = Te.cex+0.1, las = 0, outer = TRUE) # Y axis label.
axis(2, at = seq(0,round(range(response)[2],2),length.out = 20), labels = round(seq(0,round(range(response)[2],2),length.out = 20),2),lwd = 0.5, line = -0.8, outer = TRUE) # y axis.
par(mgp = c(3,0.2,0))
axis(1,at=seq(min(time),max(time),1), labels = as.character(seq(min(time),max(time),1)),lwd = 0.5, line = -0.1, outer = TRUE) # x axis.
}
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
load("https://github.com/kchezik/River-Network-Flow-Trends/blob/master/03_Data_Annual.RData")
ls()
head(Y.Data)
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*8 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*3 #Point size.
par(cex.axis = Te.cex, mgp = c(0,0,0), oma = c(0,0,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~jitter(time,factor = 2), col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
#points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
}
?
?jpeg()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1600, height = 800, pointsize = 500)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
jpeg(filename = "Flow-Time_Banner.jpg", width = 1600, height = 800)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1600, height = 400)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1400, height = 500, pointsize = 15)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1400, height = 425, pointsize = 20)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 25)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = NA)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*8 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*4 #Point size.
par(cex.axis = Te.cex, mgp = c(0,0,0), oma = c(0,0,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~jitter(time,factor = 2), col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
#points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
}
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = NA)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*9 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*3 #Point size.
par(cex.axis = Te.cex, mgp = c(0,0,0), oma = c(0,0,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~jitter(time,factor = 2), col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
#points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
}
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = NA)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
Flow.Time = function(time, response, weight, group, alpha = 0.25, seq.inc = 0.083, Te.cex = 0.7, xlab= "time", ylab ="response"){
#vector scaled 0-1 for function
col = ((weight-min(weight))/(diff(range(weight))))^0.3
#color ramp function
library(RColorBrewer)
Blues = brewer.pal(9, "Blues")#; RdYlBu = RdYlBu[-c(5,6,7)]
FUN = colorRamp(Blues[c(2:7)], bias=1)
#apply function
cols = FUN(col)
cols = rgb(cols, maxColorValue=256)
cols = paste(cols, "99", sep = "")
#Determination of point/line size and legend point data.
Area.width = ((((weight-min(weight))/(diff(range(weight))))^0.3)+0.01)*12 #Line width.
Area.size = (((weight-min(weight))/(diff(range(weight))))^0.3)*3 #Point size.
par(cex.axis = Te.cex, mgp = c(0,0,0), oma = c(0,0,0,0), mar=c(0,0,0,0), family = 'serif', fg = NA, las = 1, mex = 1, mfrow = c(1,1))
plot(response~jitter(time,factor = 2), col = cols, axes = F, xaxt = 'n', yaxt = 'n', pch = 16, cex = Area.size, xlim = c(1980,2000), ylim = c(0.27,2))
#points(time, response, bg = cols, pch = 21, cex = Area.size)
#Add loess lines
df = data.frame(group, time, response, weight, cols, Area.width, stringsAsFactors = F)
plyr::d_ply(df, "group", function(x){
m = loess(response~time, model = T, span = alpha, data = x)
lines(predict(m, data.frame(time = seq(min(x$time), max(x$time),seq.inc)))~seq(min(x$time), max(x$time),seq.inc), col = x$cols, lwd = x$Area.width)
})
}
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = NA)
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = "transparent")
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
setwd("~/Documents/CV_Transcripts_Pubs/Web_Site/pictures")
jpeg(filename = "Flow-Time_Banner.jpg", width = 1350, height = 425, pointsize = 23, bg = "#F7F7F7")
Flow.Time(time = Y.Data$Year, response = Y.Data$Med.sc, weight = Y.Data$Area, group = Y.Data$Station.ID, xlab = "Year", ylab = expression("Scaled Median Flow (m"^3%.%"sec"^-1*")"%.%"year"^-1))
dev.off()
